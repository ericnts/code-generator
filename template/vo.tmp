package {Package}

import (
	"{Project}/common"
	"{Project}/entity"{Import}
)

type {Object}Query struct {
	common.Query

{QueryField}
}

type {Object} struct {
{Field}
}

func (v *{Object}) Load(inter common.IEntity) {
	e := inter.(*entity.{Object})
{ToVO}
}

type {Object}Detail struct {
	{Object}
}

func (v *{Object}Detail) Load(inter common.IEntity) {
	e := inter.(*entity.{Object})
	v.{Object}.Load(e)
}

type {Object}Modify struct {
{ModifyField}
}

func (p *{Object}Modify) Decorate(i common.IEntity)  {
    e := i.(*entity.{Object})
{ToEntity}
}

type {Object}Create struct {
	{Object}Modify
}

func (p *{Object}Create) ToEntity() common.IEntity {
    e := new(entity.{Object})
    p.{Object}Modify.Decorate(e)
	return e
}
