package {Package}

import (
	"{Project}/common"
	"{Project}/entity"{Import}
)

type {Object}QueryVO struct {
	common.Query

{Field}
}

type {Object}ListVO struct {
{Field}
}

func (v *{Object}ListVO) Load(inter common.EntityInter) {
	e, ok := inter.(*entity.{Object})
	if !ok {
		return
	}
{ToVO}
}

type {Object}VO struct {
	{Object}ListVO
}

func (v *{Object}VO) Load(inter common.EntityInter) {
	e, ok := inter.(*entity.{Object})
	if !ok {
		return
	}
	v.{Object}ListVO = {Object}ListVO{}
	v.{Object}ListVO.Load(e)
}

type {Object}ModifyVO struct {
{Field}
}

func (p *{Object}ModifyVO) ToEntity(id string) common.EntityInter {
	return &entity.{Object}{
		Entity: common.Entity{
			ID: id,
		},
{ToEntity}
	}
}

type {Object}CreateVO struct {
	{Object}ModifyVO
}

func (p *{Object}CreateVO) ToEntity() common.EntityInter {
	return p.{Object}ModifyVO.ToEntity("")
}
