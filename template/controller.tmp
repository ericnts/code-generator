package {Package}

import (
	"{Project}/common"
	"{Project}/service"
	"{Project}/vo"
	"github.com/gin-gonic/gin"
	"strings"
)

// @Tags {Object}
// @Summary 查询{Comment}列表
// @Description 查询{Comment}接口
// @Security ApiKeyAuth
// @Param param query vo.{Object}QueryVO false "查询参数"
// @Success 200 {object} common.Result{data=common.CollectionResult{list=vo.{Object}ListVO}}
// @Router {Router} [get]
func Find{Object}(c *gin.Context) {
	var queryVO vo.{Object}QueryVO
	if err := c.Bind(&queryVO); err != nil {
		return
	}
	if result, err := service.{Object}.Find(c, &queryVO); err != nil {
		common.Err(c, err)
	} else {
		common.Success(c, result)
	}
}

// @Tags {Object}
// @Summary 查询{Comment}信息
// @Description 查询单个{Comment}详细新信息
// @Security ApiKeyAuth
// @Param id path string true "{Object}ID"
// @Success 200 {object} common.Result{data=vo.{Object}VO}
// @Router {Router}/{id} [get]
func Get{Object}(c *gin.Context) {
	id := c.Param("id")
	if len(strings.TrimSpace(id))==0 {
		common.Err(c, common.IDBlankErr)
		return
	}
	if result, err := service.{Object}.GetByID(c, id); err != nil {
		common.Err(c, err)
	} else {
		common.Success(c, result)
	}
}

// @Tags {Object}
// @Summary 添加{Comment}
// @Description 添加{Comment}
// @Security ApiKeyAuth
// @Param param body vo.{Object}CreateVO true "{Comment}信息"
// @Success 200 {object} common.Result{data=string}
// @Router {Router} [post]
func Post{Object}(c *gin.Context) {
	var createVO vo.{Object}CreateVO
	if err := c.Bind(&createVO); err != nil {
		return
	}
	if id, err := service.{Object}.Create(c, &createVO); err != nil {
		common.Err(c, err)
	} else {
		common.Success(c, id)
	}
}

// @Tags {Object}
// @Summary 修改{Comment}
// @Description 修改{Comment}，根据ID判断
// @Security ApiKeyAuth
// @Param id path string true "{Object}ID"
// @Param param body vo.{Object}ModifyVO false "{Comment}信息"
// @Success 200 {object} common.Result{data=int64}
// @Router {Router}/{id} [put]
func Put{Object}(c *gin.Context) {
	id := c.Param("id")
	if len(strings.TrimSpace(id))==0 {
		common.Err(c, common.IDBlankErr)
		return
	}
	var modifyVO vo.{Object}ModifyVO
	if err := c.Bind(&modifyVO); err != nil {
		return
	}
	if count, err := service.{Object}.Modify(c, id, &modifyVO); err != nil {
		common.Err(c, err)
	} else {
		common.Success(c, count)
	}
}

// @Tags {Object}
// @Summary 删除{Comment}
// @Description 删除{Comment}，多个{Comment}用逗号分隔
// @Security ApiKeyAuth
// @Param param query common.DelVO true "ids"
// @Success 200 {object} common.Result{data=int64}
// @Router {Router} [delete]
func Del{Object}Batch(c *gin.Context) {
	var param common.DelVO
	if err := c.Bind(&param); err != nil {
		return
	}
	if count, err := service.{Object}.DelByID(c, strings.Split(param.IDs, ",")...); err != nil {
		common.Err(c, err)
	} else {
		common.Success(c, count)
	}
}

// @Tags {Object}
// @Summary 删除{Comment}
// @Description 删除{Comment}
// @Security ApiKeyAuth
// @Param id path string true "{Object}ID"
// @Success 200 {object} common.Result{data=int64}
// @Router {Router}/{id} [delete]
func Del{Object}(c *gin.Context) {
	id := c.Param("id")
	if len(strings.TrimSpace(id))==0 {
		common.Err(c, common.IDBlankErr)
		return
	}
	if count, err := service.{Object}.DelByID(c, id); err != nil {
		common.Err(c, err)
	} else {
		common.Success(c, count)
	}
}
